defmodule BrettProjekt.Game.Player do
  defstruct [
    :id,
    :name,
    {:roles, []}
  ]
end

defmodule BrettProjekt.Game do
  use GenServer

  @enforce_keys [:game_id]
  defstruct [
    :game_id,
    {:id_count, 0},
    {:players, %{}},
    {:join_enabled, true}
  ]

  # ---------- CLIENT API ----------
  def create(game_id) do
    GenServer.start_link(__MODULE__, %BrettProjekt.Game{game_id: game_id})
  end

  def get_id(game) do
    GenServer.call(game, :get_id)
  end

  def add_player(game, name) do
    name = String.downcase String.trim name
    cond do
      join_enabled?(game) == false ->
        {:err, :joining_disabled}

      has_player?(game, name) == true ->
        {:err, :name_conflict}

      true ->
        GenServer.call(game, {:add_player, name})
    end
  end

  def get_players(game) do
    GenServer.call(game, :get_players)
  end

  @doc """
  Returns whether a game can be joined by a new player

  ## Parameters

    - game: The game to check on

  ## Examples

      iex> {:ok, game} = BrettProjekt.Game.create System.unique_integer # Should be generated by the GameManager
      iex> BrettProjekt.Game.join_enabled? game
      true
      iex> BrettProjekt.Game.disable_join game
      iex> BrettProjekt.Game.join_enabled? game
      false

  """
  def join_enabled?(game) do
    GenServer.call game, :get_join_enabled
  end

  def disable_join(game) do
    GenServer.call game, :disable_join
  end

  def has_player?(game, player_name) do
    player = Enum.find(get_players(game), fn({_player_id, player}) ->
      %{name: name} = player
      player_name = String.downcase String.trim player_name
      name == player_name
    end)

    case player do
      nil -> false
      _ -> true
    end
  end

  # ---------- SERVER API ----------
  def handle_call(:get_id, _from, state) do
    {:reply, Map.get(state, :game_id), state}
  end

  def handle_call(:get_players, _from, %{players: players} = state) do
    {:reply, players, state}
  end

  def handle_call({:add_player, name}, _from, %{players: players, id_count: id} = state) do

    # If this is the very first player, make him a game-admin
    roles =
      case id == 0 do
        true -> [:admin]
        _ -> []
      end

    player = %BrettProjekt.Game.Player{id: id, name: name, roles: roles}
    players = Map.put players, id, player

    new_state = %{state | id_count: id + 1, players: players}

    # Reply with the added player and a list of all current players
    {:reply, {:ok, player, players}, new_state}
  end

  def handle_call(:get_join_enabled, _from, %{join_enabled: join_enabled} = state) do
    {:reply, join_enabled, state}
  end

  def handle_call(:disable_join, _from, state) do
    {:reply, :ok, %{state | join_enabled: false}}
  end
end
