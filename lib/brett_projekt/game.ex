defmodule BrettProjekt.Game do
  alias BrettProjekt.Game.Player, as: Player

  @enforce_keys [:game_id]
  defstruct [
    :game_id,
    {:id_count, 0},
    {:players, %{}},
    {:join_enabled, true}
  ]

  # ---------- CLIENT API ----------
  @doc """
  Creates a new game with id.

  ## Parameters

    - game_id: a unique identifier of the game. Normally generated by the game manager.

  ## Examples

      BrettProjekt.Game.create System.unique_integer

  """
  def create(game_id) do
    GenServer.start_link(BrettProjekt.GameServer, %BrettProjekt.Game{game_id: game_id})
  end

  @doc """
  Returns the unique game-id set when calling `create/1`
  """
  def get_id(game) do
    GenServer.call(game, :get_id)
  end

  @doc """
  Add a new player with a given name to the game.

  The player name will be trimmed and converted to lowercase.

  ## Arguments

    - game: The game to which the player is going to be added
    - name: The name of the new player

  """
  def add_new_player(game, name) do
    name = String.downcase String.trim name
    cond do
      join_enabled?(game) == false ->
        {:err, :joining_disabled}

      has_player?(game, name) == true ->
        {:err, :name_conflict}

      true ->
        roles =
          case Enum.count get_players(game) do
            0 -> [:admin]
            _ -> []
          end

        player_id = GenServer.call game, :get_new_player_id
        {:ok, player} = Player.create player_id, name, roles

        GenServer.call(game, {:add_player, player})
    end
  end

  @doc """
  Returns a map of players with the player-id as key and a player-struct as the value.
  """
  def get_players(game) do
    GenServer.call(game, :get_players)
  end

  @doc """
  Returns whether a game can be joined by a new player

  ## Parameters

    - game: The game to check on

  ## Examples

      iex> {:ok, game} = BrettProjekt.Game.create System.unique_integer # Should be generated by the GameManager
      iex> BrettProjekt.Game.join_enabled? game
      true
      iex> BrettProjekt.Game.disable_join game
      iex> BrettProjekt.Game.join_enabled? game
      false

  """
  def join_enabled?(game) do
    GenServer.call game, :get_join_enabled
  end

  @doc """
  Disables joining of new players

  ## Arguments

    - game: The game on which joining of new players should be disabled

  """
  def disable_join(game) do
    GenServer.call game, :disable_join
  end

  @doc """
  Checks if a player with name is in the game

  The name that will be checked gets trimmed and converted to lowercase.

  ## Arguments

    - game: The game to check for players
    - player_name: Name of the player to search for

  """
  def has_player?(game, player_name) do
    player = Enum.find(get_players(game), fn({_player_id, player}) ->
      name = Player.get_name player
      player_name = String.downcase String.trim player_name
      name == player_name
    end)

    case player do
      nil -> false
      _ -> true
    end
  end
end
